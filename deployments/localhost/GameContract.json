{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialTokenSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenNeededToPlay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GameContract__AmountTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameContract__NoEthSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "GameContract__NotEnoughTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GameContract__PlayerAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "remainingToken",
          "type": "uint256"
        }
      ],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "PlayerSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenAmountBought",
          "type": "uint256"
        }
      ],
      "name": "TokenBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "prizes",
          "type": "uint256[]"
        }
      ],
      "name": "WinnersPaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "isApproved",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "winner1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "winner3",
          "type": "address"
        }
      ],
      "name": "distributeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitialTokenGiven",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "getPlayerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameContract.PlayerInfo",
          "name": "playerInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenNeededToPlay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "signIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9f9810eae5a9fc3daa9e4740d76b13b226a5a62a8c539c536d1ce081f08ae4fe",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1465559",
    "logsBloom": "0x
    "blockHash": "0x5dcf6c9db2794e0a090aab2127d812d713251182dc5a869aa1f89b480c4bdde4",
    "transactionHash": "0x9f9810eae5a9fc3daa9e4740d76b13b226a5a62a8c539c536d1ce081f08ae4fe",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1465559",
    "status": 1,
    "byzantium": true
  },
  "args": [
    20,
    10,
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "d906f2a271ea26ff907870d7638cfd27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenNeededToPlay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GameContract__AmountTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameContract__NoEthSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"GameContract__NotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GameContract__PlayerAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remainingToken\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"PlayerSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenAmountBought\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"prizes\",\"type\":\"uint256[]\"}],\"name\":\"WinnersPaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isApproved\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner3\",\"type\":\"address\"}],\"name\":\"distributeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitialTokenGiven\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"getPlayerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameContract.PlayerInfo\",\"name\":\"playerInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenNeededToPlay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"signIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameContract.sol\":\"GameContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/GameContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./MiraiToken.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConvertor.sol\\\";\\n\\ncontract GameContract {\\n  using PriceConverter for uint256;\\n  // Structs\\n  struct PlayerInfo {\\n    uint256 id;\\n    uint256 tokenAmount;\\n  }\\n  //Constants\\n  uint256 constant DECIMALS = 100000000000000000;\\n  // Variables\\n  address private s_owner;\\n  uint256 private s_numberOfPlayers;\\n  mapping(address => PlayerInfo) private s_addressToToken;\\n  MiraiToken private s_token;\\n  uint256 immutable i_initialTokenSupply;\\n  uint256 immutable i_tokenNeededToPlay;\\n  AggregatorV3Interface internal s_priceFeed;\\n  // Events\\n  event PlayerSigned(address indexed signer);\\n  event GameStarted(address indexed signer, uint256 indexed remainingToken);\\n  event TokenBought(address indexed signer, uint256 indexed tokenAmountBought);\\n  event WinnersPaid(address[] indexed winners, uint256[] indexed prizes);\\n  // Errors\\n  error GameContract__PlayerAlreadyExists();\\n  error GameContract__NotEnoughTokens(address signer);\\n  error GameContract__AmountTransferFailed();\\n  error GameContract__NoEthSent();\\n  modifier onlyOwner() {\\n    require(msg.sender == s_owner, \\\"You are not the owner\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    uint256 initialTokenSupply,\\n    uint256 tokenNeededToPlay,\\n    address priceFeed\\n  ) {\\n    s_owner = msg.sender;\\n    i_initialTokenSupply = initialTokenSupply * DECIMALS;\\n    i_tokenNeededToPlay = tokenNeededToPlay * DECIMALS;\\n    s_priceFeed = AggregatorV3Interface(priceFeed);\\n    s_numberOfPlayers = 0;\\n  }\\n\\n  // Main functions\\n  function signIn(address signer) public {\\n    if (s_addressToToken[signer].id > 0) {\\n      revert GameContract__PlayerAlreadyExists();\\n    }\\n    s_token.transfer(signer, 20 * DECIMALS);\\n    s_addressToToken[signer].tokenAmount = 20 * DECIMALS;\\n    s_addressToToken[signer].id = 1;\\n    s_numberOfPlayers = s_numberOfPlayers + 1;\\n    emit PlayerSigned(signer);\\n  }\\n\\n  function burn(address signer) public returns (uint256 isApproved) {\\n    if (s_token.balanceOf(signer) < i_tokenNeededToPlay) {\\n      return 0;\\n    }\\n    s_token.transferFrom(signer, s_owner, i_tokenNeededToPlay);\\n    s_addressToToken[signer].tokenAmount =\\n      s_addressToToken[signer].tokenAmount -\\n      i_tokenNeededToPlay;\\n    emit GameStarted(signer, s_addressToToken[signer].tokenAmount);\\n    return 1;\\n  }\\n\\n  function buyToken(address signer) public payable {\\n    uint256 tokenToTransfer = msg.value.getConversionRate(s_priceFeed) *\\n      DECIMALS;\\n    if (tokenToTransfer == 0) {\\n      revert GameContract__NoEthSent();\\n    }\\n    s_token.transferFrom(s_owner, signer, tokenToTransfer);\\n    s_addressToToken[signer].tokenAmount =\\n      s_addressToToken[signer].tokenAmount +\\n      tokenToTransfer;\\n    emit TokenBought(signer, tokenToTransfer);\\n  }\\n\\n  function distributeToken(\\n    address winner1,\\n    address winner2,\\n    address winner3\\n  ) public payable {\\n    uint256 totalAmountHeldByContract = address(this).balance;\\n    uint256 totalAmountToDistribute = (totalAmountHeldByContract * 4) / 5;\\n    uint256 amountCreditedToOwner = totalAmountHeldByContract -\\n      totalAmountToDistribute;\\n    uint256 amountCreditedToFirst = totalAmountToDistribute / 2;\\n    uint256 amountCreditedToSecond = (totalAmountToDistribute * 3) / 10;\\n    uint256 amountCreditedToThird = (totalAmountToDistribute) -\\n      amountCreditedToFirst -\\n      amountCreditedToSecond;\\n    // Pay the winners\\n    address[] memory addresses = new address[](3);\\n    addresses[0] = winner1;\\n    addresses[1] = winner2;\\n    addresses[2] = winner3;\\n    uint256[] memory prizes = new uint256[](3);\\n    prizes[0] = amountCreditedToFirst;\\n    prizes[1] = amountCreditedToSecond;\\n    prizes[2] = amountCreditedToThird;\\n    for (uint16 i = 0; i < 3; i++) {\\n      (bool callSuccess, ) = payable(addresses[i]).call{ value: prizes[i] }(\\\"\\\");\\n      if (!callSuccess) {\\n        revert GameContract__AmountTransferFailed();\\n      }\\n    }\\n    (bool callSuccess, ) = payable(s_owner).call{\\n      value: amountCreditedToOwner\\n    }(\\\"\\\");\\n    if (!callSuccess) {\\n      revert GameContract__AmountTransferFailed();\\n    }\\n    emit WinnersPaid(addresses, prizes);\\n  }\\n\\n  // Getter functions\\n  function getPlayerInfo(\\n    address signer\\n  ) public view returns (PlayerInfo memory playerInfo) {\\n    return s_addressToToken[signer];\\n  }\\n\\n  function getTokenNeededToPlay() public view returns (uint256 amount) {\\n    return i_tokenNeededToPlay;\\n  }\\n\\n  function getInitialTokenGiven() public view returns (uint256 amount) {\\n    return i_initialTokenSupply;\\n  }\\n\\n  function getNumberOfPlayers() public view returns (uint256 number) {\\n    return s_numberOfPlayers;\\n  }\\n}\\n\",\"keccak256\":\"0xe2ef7f17d3ac13ae25e26a15f148b9316d51260b3e93ddfc88d75cb8602d9572\",\"license\":\"MIT\"},\"contracts/MiraiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MiraiToken is ERC20 {\\n  constructor(uint256 initialSupply) ERC20(\\\"Mirai\\\", \\\"MRI\\\") {\\n    _mint(msg.sender, initialSupply);\\n  }\\n}\\n\",\"keccak256\":\"0x1d051283ad6c218a8b4b37ad6aefcd8ffd55a86f49e1b1f89d385ca6d16ca3b2\",\"license\":\"MIT\"},\"contracts/PriceConvertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  function getConversionRate(\\n    uint256 ethAmount,\\n    AggregatorV3Interface priceFeed\\n  ) internal view returns (uint256) {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0x960f76d514d3153eb8310e71dd92286acd80ebd68cf69ea61699b460bbac31ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b6938038062001b698339818101604052810190620000379190620001a8565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555067016345785d8a0000836200008d919062000233565b6080818152505067016345785d8a000082620000aa919062000233565b60a0818152505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060018190555050505062000294565b600080fd5b6000819050919050565b6200011d8162000108565b81146200012957600080fd5b50565b6000815190506200013d8162000112565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001708262000143565b9050919050565b620001828162000163565b81146200018e57600080fd5b50565b600081519050620001a28162000177565b92915050565b600080600060608486031215620001c457620001c362000103565b5b6000620001d4868287016200012c565b9350506020620001e7868287016200012c565b9250506040620001fa8682870162000191565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620002408262000108565b91506200024d8362000108565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000289576200028862000204565b5b828202905092915050565b60805160a05161189a620002cf600039600081816101e00152818161096701528181610aa20152610b340152600061070a015261189a6000f3fe60806040526004361061007b5760003560e01c80637e72fb521161004e5780637e72fb521461012f57806389afcb441461014b5780638fa9e55c14610188578063fd6673f5146101b15761007b565b80630237ba5514610080578063116e0ed0146100ab57806359328401146100c7578063759902b314610104575b600080fd5b34801561008c57600080fd5b506100956101dc565b6040516100a29190610fcd565b60405180910390f35b6100c560048036038101906100c0919061104b565b610204565b005b3480156100d357600080fd5b506100ee60048036038101906100e9919061109e565b610699565b6040516100fb9190611109565b60405180910390f35b34801561011057600080fd5b50610119610706565b6040516101269190610fcd565b60405180910390f35b6101496004803603810190610144919061109e565b61072e565b005b34801561015757600080fd5b50610172600480360381019061016d919061109e565b610963565b60405161017f9190610fcd565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa919061109e565b610c76565b005b3480156101bd57600080fd5b506101c6610eb4565b6040516101d39190610fcd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60004790506000600560048361021a9190611153565b61022491906111dc565b905060008183610234919061120d565b9050600060028361024591906111dc565b90506000600a6003856102589190611153565b61026291906111dc565b90506000818386610273919061120d565b61027d919061120d565b90506000600367ffffffffffffffff81111561029c5761029b611241565b5b6040519080825280602002602001820160405280156102ca5781602001602082028036833780820191505090505b50905089816000815181106102e2576102e1611270565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050888160018151811061033157610330611270565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087816002815181106103805761037f611270565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600367ffffffffffffffff8111156103d7576103d6611241565b5b6040519080825280602002602001820160405280156104055781602001602082028036833780820191505090505b509050848160008151811061041d5761041c611270565b5b602002602001018181525050838160018151811061043e5761043d611270565b5b602002602001018181525050828160028151811061045f5761045e611270565b5b60200260200101818152505060005b60038161ffff16101561056e576000838261ffff168151811061049457610493611270565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838361ffff16815181106104c9576104c8611270565b5b60200260200101516040516104dd906112d0565b60006040518083038185875af1925050503d806000811461051a576040519150601f19603f3d011682016040523d82523d6000602084013e61051f565b606091505b505090508061055a576040517fec6ee13400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508080610566906112f3565b91505061046e565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16876040516105b6906112d0565b60006040518083038185875af1925050503d80600081146105f3576040519150601f19603f3d011682016040523d82523d6000602084013e6105f8565b606091505b5050905080610633576040517fec6ee13400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160405161064191906113d6565b60405180910390208360405161065791906114a5565b60405180910390207f18b194209306069cd3a82dcfb3a1247daf22356964d1aa7472228b1890a1cd9460405160405180910390a3505050505050505050505050565b6106a1610f9a565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600067016345785d8a000061076e600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610ebe90919063ffffffff16565b6107789190611153565b905060008114156107b5576040517ff9052c2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b8152600401610834939291906114cb565b602060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610886919061153a565b5080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546108d59190611567565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550808273ffffffffffffffffffffffffffffffffffffffff167fa3a187cfc249a33f6c4046e8d418886eea8564f9dd214a32aa5ba08d9602b54360405160405180910390a35050565b60007f0000000000000000000000000000000000000000000000000000000000000000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016109e191906115bd565b60206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a319190611604565b1015610a405760009050610c71565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401610adf939291906114cb565b602060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b31919061153a565b507f0000000000000000000000000000000000000000000000000000000000000000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610ba0919061120d565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548273ffffffffffffffffffffffffffffffffffffffff167fea32a03505fd9f04d664676d72295a86c5fb0465e69654751907ca305bc1d1c760405160405180910390a3600190505b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610cf3576040517fa205a4ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8267016345785d8a00006014610d479190611153565b6040518363ffffffff1660e01b8152600401610d64929190611631565b602060405180830381600087803b158015610d7e57600080fd5b505af1158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db6919061153a565b5067016345785d8a00006014610dcc9190611153565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060018054610e689190611567565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167f0683c91d12e87a4e9be109923784c91cdbb73d731c9ea59b44ed91e76bbad39660405160405180910390a250565b6000600154905090565b600080610eca83610efa565b90506000670de0b6b3a76400008583610ee39190611153565b610eed91906111dc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b91906116d2565b5050509150506402540be40081610f92919061174d565b915050919050565b604051806040016040528060008152602001600081525090565b6000819050919050565b610fc781610fb4565b82525050565b6000602082019050610fe26000830184610fbe565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101882610fed565b9050919050565b6110288161100d565b811461103357600080fd5b50565b6000813590506110458161101f565b92915050565b60008060006060848603121561106457611063610fe8565b5b600061107286828701611036565b935050602061108386828701611036565b925050604061109486828701611036565b9150509250925092565b6000602082840312156110b4576110b3610fe8565b5b60006110c284828501611036565b91505092915050565b6110d481610fb4565b82525050565b6040820160008201516110f060008501826110cb565b50602082015161110360208501826110cb565b50505050565b600060408201905061111e60008301846110da565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115e82610fb4565b915061116983610fb4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111a2576111a1611124565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111e782610fb4565b91506111f283610fb4565b925082611202576112016111ad565b5b828204905092915050565b600061121882610fb4565b915061122383610fb4565b92508282101561123657611235611124565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b60006112ba60008361129f565b91506112c5826112aa565b600082019050919050565b60006112db826112ad565b9150819050919050565b600061ffff82169050919050565b60006112fe826112e5565b915061ffff82141561131357611312611124565b5b600182019050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b61134d81610fb4565b82525050565b600061135f8383611344565b60208301905092915050565b6000602082019050919050565b60006113838261131e565b61138d8185611329565b935061139883611334565b8060005b838110156113c95781516113b08882611353565b97506113bb8361136b565b92505060018101905061139c565b5085935050505092915050565b60006113e28284611378565b915081905092915050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b61141c8161100d565b82525050565b600061142e8383611413565b60208301905092915050565b6000602082019050919050565b6000611452826113ed565b61145c81856113f8565b935061146783611403565b8060005b8381101561149857815161147f8882611422565b975061148a8361143a565b92505060018101905061146b565b5085935050505092915050565b60006114b18284611447565b915081905092915050565b6114c58161100d565b82525050565b60006060820190506114e060008301866114bc565b6114ed60208301856114bc565b6114fa6040830184610fbe565b949350505050565b60008115159050919050565b61151781611502565b811461152257600080fd5b50565b6000815190506115348161150e565b92915050565b6000602082840312156115505761154f610fe8565b5b600061155e84828501611525565b91505092915050565b600061157282610fb4565b915061157d83610fb4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115b2576115b1611124565b5b828201905092915050565b60006020820190506115d260008301846114bc565b92915050565b6115e181610fb4565b81146115ec57600080fd5b50565b6000815190506115fe816115d8565b92915050565b60006020828403121561161a57611619610fe8565b5b6000611628848285016115ef565b91505092915050565b600060408201905061164660008301856114bc565b6116536020830184610fbe565b9392505050565b600069ffffffffffffffffffff82169050919050565b6116798161165a565b811461168457600080fd5b50565b60008151905061169681611670565b92915050565b6000819050919050565b6116af8161169c565b81146116ba57600080fd5b50565b6000815190506116cc816116a6565b92915050565b600080600080600060a086880312156116ee576116ed610fe8565b5b60006116fc88828901611687565b955050602061170d888289016116bd565b945050604061171e888289016115ef565b935050606061172f888289016115ef565b925050608061174088828901611687565b9150509295509295909350565b60006117588261169c565b91506117638361169c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156117a2576117a1611124565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156117df576117de611124565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561181c5761181b611124565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561185957611858611124565b5b82820290509291505056fea26469706673582212206e2ed64d16c6d493616d2233e3eaf79ddd54d79f1178e25bbfb1c14647abe04a64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80637e72fb521161004e5780637e72fb521461012f57806389afcb441461014b5780638fa9e55c14610188578063fd6673f5146101b15761007b565b80630237ba5514610080578063116e0ed0146100ab57806359328401146100c7578063759902b314610104575b600080fd5b34801561008c57600080fd5b506100956101dc565b6040516100a29190610fcd565b60405180910390f35b6100c560048036038101906100c0919061104b565b610204565b005b3480156100d357600080fd5b506100ee60048036038101906100e9919061109e565b610699565b6040516100fb9190611109565b60405180910390f35b34801561011057600080fd5b50610119610706565b6040516101269190610fcd565b60405180910390f35b6101496004803603810190610144919061109e565b61072e565b005b34801561015757600080fd5b50610172600480360381019061016d919061109e565b610963565b60405161017f9190610fcd565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa919061109e565b610c76565b005b3480156101bd57600080fd5b506101c6610eb4565b6040516101d39190610fcd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60004790506000600560048361021a9190611153565b61022491906111dc565b905060008183610234919061120d565b9050600060028361024591906111dc565b90506000600a6003856102589190611153565b61026291906111dc565b90506000818386610273919061120d565b61027d919061120d565b90506000600367ffffffffffffffff81111561029c5761029b611241565b5b6040519080825280602002602001820160405280156102ca5781602001602082028036833780820191505090505b50905089816000815181106102e2576102e1611270565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050888160018151811061033157610330611270565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087816002815181106103805761037f611270565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600367ffffffffffffffff8111156103d7576103d6611241565b5b6040519080825280602002602001820160405280156104055781602001602082028036833780820191505090505b509050848160008151811061041d5761041c611270565b5b602002602001018181525050838160018151811061043e5761043d611270565b5b602002602001018181525050828160028151811061045f5761045e611270565b5b60200260200101818152505060005b60038161ffff16101561056e576000838261ffff168151811061049457610493611270565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838361ffff16815181106104c9576104c8611270565b5b60200260200101516040516104dd906112d0565b60006040518083038185875af1925050503d806000811461051a576040519150601f19603f3d011682016040523d82523d6000602084013e61051f565b606091505b505090508061055a576040517fec6ee13400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b508080610566906112f3565b91505061046e565b5060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16876040516105b6906112d0565b60006040518083038185875af1925050503d80600081146105f3576040519150601f19603f3d011682016040523d82523d6000602084013e6105f8565b606091505b5050905080610633576040517fec6ee13400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160405161064191906113d6565b60405180910390208360405161065791906114a5565b60405180910390207f18b194209306069cd3a82dcfb3a1247daf22356964d1aa7472228b1890a1cd9460405160405180910390a3505050505050505050505050565b6106a1610f9a565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600067016345785d8a000061076e600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610ebe90919063ffffffff16565b6107789190611153565b905060008114156107b5576040517ff9052c2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684846040518463ffffffff1660e01b8152600401610834939291906114cb565b602060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610886919061153a565b5080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546108d59190611567565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550808273ffffffffffffffffffffffffffffffffffffffff167fa3a187cfc249a33f6c4046e8d418886eea8564f9dd214a32aa5ba08d9602b54360405160405180910390a35050565b60007f0000000000000000000000000000000000000000000000000000000000000000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016109e191906115bd565b60206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a319190611604565b1015610a405760009050610c71565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401610adf939291906114cb565b602060405180830381600087803b158015610af957600080fd5b505af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b31919061153a565b507f0000000000000000000000000000000000000000000000000000000000000000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610ba0919061120d565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548273ffffffffffffffffffffffffffffffffffffffff167fea32a03505fd9f04d664676d72295a86c5fb0465e69654751907ca305bc1d1c760405160405180910390a3600190505b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541115610cf3576040517fa205a4ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8267016345785d8a00006014610d479190611153565b6040518363ffffffff1660e01b8152600401610d64929190611631565b602060405180830381600087803b158015610d7e57600080fd5b505af1158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db6919061153a565b5067016345785d8a00006014610dcc9190611153565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060018054610e689190611567565b6001819055508073ffffffffffffffffffffffffffffffffffffffff167f0683c91d12e87a4e9be109923784c91cdbb73d731c9ea59b44ed91e76bbad39660405160405180910390a250565b6000600154905090565b600080610eca83610efa565b90506000670de0b6b3a76400008583610ee39190611153565b610eed91906111dc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610f4357600080fd5b505afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b91906116d2565b5050509150506402540be40081610f92919061174d565b915050919050565b604051806040016040528060008152602001600081525090565b6000819050919050565b610fc781610fb4565b82525050565b6000602082019050610fe26000830184610fbe565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101882610fed565b9050919050565b6110288161100d565b811461103357600080fd5b50565b6000813590506110458161101f565b92915050565b60008060006060848603121561106457611063610fe8565b5b600061107286828701611036565b935050602061108386828701611036565b925050604061109486828701611036565b9150509250925092565b6000602082840312156110b4576110b3610fe8565b5b60006110c284828501611036565b91505092915050565b6110d481610fb4565b82525050565b6040820160008201516110f060008501826110cb565b50602082015161110360208501826110cb565b50505050565b600060408201905061111e60008301846110da565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061115e82610fb4565b915061116983610fb4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111a2576111a1611124565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111e782610fb4565b91506111f283610fb4565b925082611202576112016111ad565b5b828204905092915050565b600061121882610fb4565b915061122383610fb4565b92508282101561123657611235611124565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b60006112ba60008361129f565b91506112c5826112aa565b600082019050919050565b60006112db826112ad565b9150819050919050565b600061ffff82169050919050565b60006112fe826112e5565b915061ffff82141561131357611312611124565b5b600182019050919050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b61134d81610fb4565b82525050565b600061135f8383611344565b60208301905092915050565b6000602082019050919050565b60006113838261131e565b61138d8185611329565b935061139883611334565b8060005b838110156113c95781516113b08882611353565b97506113bb8361136b565b92505060018101905061139c565b5085935050505092915050565b60006113e28284611378565b915081905092915050565b600081519050919050565b600081905092915050565b6000819050602082019050919050565b61141c8161100d565b82525050565b600061142e8383611413565b60208301905092915050565b6000602082019050919050565b6000611452826113ed565b61145c81856113f8565b935061146783611403565b8060005b8381101561149857815161147f8882611422565b975061148a8361143a565b92505060018101905061146b565b5085935050505092915050565b60006114b18284611447565b915081905092915050565b6114c58161100d565b82525050565b60006060820190506114e060008301866114bc565b6114ed60208301856114bc565b6114fa6040830184610fbe565b949350505050565b60008115159050919050565b61151781611502565b811461152257600080fd5b50565b6000815190506115348161150e565b92915050565b6000602082840312156115505761154f610fe8565b5b600061155e84828501611525565b91505092915050565b600061157282610fb4565b915061157d83610fb4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156115b2576115b1611124565b5b828201905092915050565b60006020820190506115d260008301846114bc565b92915050565b6115e181610fb4565b81146115ec57600080fd5b50565b6000815190506115fe816115d8565b92915050565b60006020828403121561161a57611619610fe8565b5b6000611628848285016115ef565b91505092915050565b600060408201905061164660008301856114bc565b6116536020830184610fbe565b9392505050565b600069ffffffffffffffffffff82169050919050565b6116798161165a565b811461168457600080fd5b50565b60008151905061169681611670565b92915050565b6000819050919050565b6116af8161169c565b81146116ba57600080fd5b50565b6000815190506116cc816116a6565b92915050565b600080600080600060a086880312156116ee576116ed610fe8565b5b60006116fc88828901611687565b955050602061170d888289016116bd565b945050604061171e888289016115ef565b935050606061172f888289016115ef565b925050608061174088828901611687565b9150509295509295909350565b60006117588261169c565b91506117638361169c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156117a2576117a1611124565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156117df576117de611124565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561181c5761181b611124565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561185957611858611124565b5b82820290509291505056fea26469706673582212206e2ed64d16c6d493616d2233e3eaf79ddd54d79f1178e25bbfb1c14647abe04a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4012,
        "contract": "contracts/GameContract.sol:GameContract",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4014,
        "contract": "contracts/GameContract.sol:GameContract",
        "label": "s_numberOfPlayers",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4019,
        "contract": "contracts/GameContract.sol:GameContract",
        "label": "s_addressToToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(PlayerInfo)4007_storage)"
      },
      {
        "astId": 4022,
        "contract": "contracts/GameContract.sol:GameContract",
        "label": "s_token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MiraiToken)4723"
      },
      {
        "astId": 4029,
        "contract": "contracts/GameContract.sol:GameContract",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(AggregatorV3Interface)160"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)160": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(MiraiToken)4723": {
        "encoding": "inplace",
        "label": "contract MiraiToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PlayerInfo)4007_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GameContract.PlayerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PlayerInfo)4007_storage"
      },
      "t_struct(PlayerInfo)4007_storage": {
        "encoding": "inplace",
        "label": "struct GameContract.PlayerInfo",
        "members": [
          {
            "astId": 4004,
            "contract": "contracts/GameContract.sol:GameContract",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4006,
            "contract": "contracts/GameContract.sol:GameContract",
            "label": "tokenAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}